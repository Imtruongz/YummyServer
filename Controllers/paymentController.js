// Controllers/paymentController.js
// Controller x·ª≠ l√Ω c√°c request li√™n quan ƒë·∫øn thanh to√°n

// Database gi·∫£ l·∫≠p ƒë·ªÉ l∆∞u tr·ªØ c√°c phi√™n thanh to√°n
const paymentSessions = {
  // Token c·ªë ƒë·ªãnh ƒë·ªÉ test kh√¥ng c·∫ßn t·∫°o m·ªõi
  "test123": {
    amount: 50000,
    description: "Thanh to√°n t·ª´ ·ª©ng d·ª•ng YummyApp - TOKEN TEST",
    merchantName: "YummyFood Test",
    merchantId: "YUMMY001",
    currency: "LAK",
    orderId: "ORDER_TEST_123",
    createdAt: new Date(),
    status: "pending"
  }
};

/**
 * T·∫°o m·ªôt phi√™n thanh to√°n m·ªõi v√† tr·∫£ v·ªÅ token
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
export const createPaymentSession = (req, res) => {
  try {
    // B·ªè qua d·ªØ li·ªáu t·ª´ req.body v√† s·ª≠ d·ª•ng d·ªØ li·ªáu fix c·ª©ng
    
    // T·∫°o token duy nh·∫•t b·∫±ng timestamp v√† s·ªë ng·∫´u nhi√™n
    const token = `${Math.floor(Math.random() * 100000)}`;
    
    // L∆∞u th√¥ng tin v√†o database gi·∫£ l·∫≠p v·ªõi d·ªØ li·ªáu fix c·ª©ng
    paymentSessions[token] = {
      bankName: "Military Commercial Joint Stock Bank - Laos branch",
      accountNumber: "100000427769",
      transactionAmount: 10000,
      bankCode: "MB",
      save: true,
      dataBank: {
        beneficiaryId: 2603,
        customerId: 21321,
        beneficiaryCustomerName: "HOANG NAM TIEN",
        customerAccNumber: "100000123042",
        beneficiaryAccountNumber: "100000427769",
        beneficiaryBankCode: "MB",
        beneficiaryBankName: "Military Commercial Joint Stock Bank - Laos branch",
        beneficiaryBankId: 8,
        reminiscentName: "HOANG NAM TIEN",
        status: 1,
        type: "INTERNAL_BANK",
        icon: {
          id: 8845,
          name: "unnamed.png",
          path: "8845/unnamed-2024-11-19.png",
          normalizeName: "unnamed-2024-11-19.png",
          classPk: 8
        },
        transferTransactionId: 21991,
        savedAccount: 1
      }
    };
    
    return res.status(200).json({
      success: true,
      token,
      message: "T·∫°o phi√™n thanh to√°n th√†nh c√¥ng"
    });
  } catch (error) {
    console.error("L·ªói t·∫°o phi√™n thanh to√°n:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server, kh√¥ng th·ªÉ t·∫°o phi√™n thanh to√°n"
    });
  }
};

/**
 * L·∫•y th√¥ng tin ƒë∆°n h√†ng t·ª´ token
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
export const getOrderInfo = (req, res) => {
  try {
    const { token } = req.query;
    
    // Log y√™u c·∫ßu v√† danh s√°ch token hi·ªán c√≥
    console.log(`üìù GET /api/payment/order-info v·ªõi token: ${token}`);
    console.log(`üîë Danh s√°ch token hi·ªán c√≥: ${Object.keys(paymentSessions).join(', ')}`);
    
    if (!token) {
      console.log('‚ùå Y√™u c·∫ßu thi·∫øu token');
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu token thanh to√°n" 
      });
    }
    
    // Ki·ªÉm tra token c√≥ t·ªìn t·∫°i kh√¥ng
    const paymentInfo = paymentSessions[token];
    
    if (!paymentInfo) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho token: ${token}`);
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n v·ªõi token n√†y"
      });
    }
    
    console.log(`‚úÖ T√¨m th·∫•y th√¥ng tin thanh to√°n cho token: ${token}`);
    console.log(paymentInfo);
    
    // Tr·∫£ v·ªÅ th√¥ng tin ƒë∆°n h√†ng
    return res.status(200).json({
      success: true,
      data: paymentInfo
    });
    
  } catch (error) {
    console.error("L·ªói l·∫•y th√¥ng tin ƒë∆°n h√†ng:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server, kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë∆°n h√†ng"
    });
  }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
export const updatePaymentStatus = (req, res) => {
  try {
    const { token, status } = req.body;
    
    if (!token || !status) {
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu token ho·∫∑c tr·∫°ng th√°i thanh to√°n" 
      });
    }
    
    // Ki·ªÉm tra token c√≥ t·ªìn t·∫°i kh√¥ng
    if (!paymentSessions[token]) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y phi√™n thanh to√°n v·ªõi token n√†y"
      });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    paymentSessions[token].status = status;
    paymentSessions[token].updatedAt = new Date();
    
    return res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng",
      data: paymentSessions[token]
    });
    
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n"
    });
  }
};