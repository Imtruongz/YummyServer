// Controllers/paymentController.js
// Controller x·ª≠ l√Ω c√°c request li√™n quan ƒë·∫øn thanh to√°n

// Database gi·∫£ l·∫≠p ƒë·ªÉ l∆∞u tr·ªØ c√°c phi√™n thanh to√°n
const paymentSessions = {
  // Token c·ªë ƒë·ªãnh ƒë·ªÉ test kh√¥ng c·∫ßn t·∫°o m·ªõi
  "test123": {
    amount: 50000,
    description: "Thanh to√°n t·ª´ ·ª©ng d·ª•ng YummyApp - TOKEN TEST",
    merchantName: "YummyFood Test",
    merchantId: "YUMMY001",
    currency: "LAK",
    orderId: "ORDER_TEST_123",
    createdAt: new Date(),
    status: "pending"
  }
};

/**
 * T·∫°o m·ªôt phi√™n thanh to√°n m·ªõi v√† tr·∫£ v·ªÅ token
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
export const createPaymentSession = async (req, res) => {
  try {
    // L·∫•y userId t·ª´ JWT token n·∫øu c√≥ (ng∆∞·ªùi g·ª≠i)
    const userId = req.user ? req.user.userId : null;
    
    // L·∫•y th√¥ng tin t·ª´ request body
    const { amount = 10000, description = "Thanh to√°n t·ª´ YummyApp", merchantName = "YummyFood", receiverId } = req.body;
    
    // T·∫°o token duy nh·∫•t b·∫±ng timestamp v√† s·ªë ng·∫´u nhi√™n
    const token = `${Date.now()}-${Math.floor(Math.random() * 100000)}`;
    
    // Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ng∆∞·ªùi nh·∫≠n
    let bankInfo = {
      bankName: "Military Commercial Joint Stock Bank - Laos branch",
      accountNumber: "100000427769",
      bankCode: "MB",
      accountName: "HOANG NAM TIEN"
    };
    
    try {
      // Import service ƒë·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng
      const bankAccountService = await import('../Services/bankAccountService.js');
      
      // N·∫øu c√≥ receiverId, ∆∞u ti√™n l·∫•y t√†i kho·∫£n c·ªßa ng∆∞·ªùi nh·∫≠n donate
      if (receiverId) {
        const receiverBankAccount = await bankAccountService.getBankAccount(receiverId);
        
        if (receiverBankAccount) {
          console.log(`ƒê√£ t√¨m th·∫•y t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi nh·∫≠n: ${receiverId}`);
          bankInfo = {
            bankName: receiverBankAccount.bankName,
            accountNumber: receiverBankAccount.accountNumber,
            bankCode: receiverBankAccount.bankCode,
            accountName: receiverBankAccount.accountName
          };
        } else {
          console.log(`Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi nh·∫≠n: ${receiverId}, s·ª≠ d·ª•ng th√¥ng tin m·∫∑c ƒë·ªãnh`);
        }
      }
    } catch (error) {
      console.error("L·ªói khi l·∫•y th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng:", error);
      // Ti·∫øp t·ª•c s·ª≠ d·ª•ng th√¥ng tin m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
    }
    
    // L∆∞u th√¥ng tin v√†o database gi·∫£ l·∫≠p v·ªõi d·ªØ li·ªáu t·ª´ bankInfo
    paymentSessions[token] = {
      bankName: bankInfo.bankName,
      accountNumber: bankInfo.accountNumber,
      transactionAmount: amount,
      bankCode: bankInfo.bankCode,
      save: true,
      dataBank: {
        beneficiaryCustomerName: bankInfo.accountName,
        customerAccNumber: "100000123042", // S·ªë t√†i kho·∫£n ng∆∞·ªùi g·ª≠i (fix c·ª©ng do kh√¥ng c√≥ trong database)
        beneficiaryAccountNumber: bankInfo.accountNumber,
        beneficiaryBankCode: bankInfo.bankCode,
        beneficiaryBankName: bankInfo.bankName,
        status: 1,
        type: "INTERNAL_BANK"
      }
    };
    
    return res.status(200).json({
      success: true,
      token,
      message: "T·∫°o phi√™n thanh to√°n th√†nh c√¥ng"
    });
  } catch (error) {
    console.error("L·ªói t·∫°o phi√™n thanh to√°n:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server, kh√¥ng th·ªÉ t·∫°o phi√™n thanh to√°n"
    });
  }
};

/**
 * L·∫•y th√¥ng tin ƒë∆°n h√†ng t·ª´ token
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
export const getOrderInfo = (req, res) => {
  try {
    const { token } = req.query;
    
    // Log y√™u c·∫ßu v√† danh s√°ch token hi·ªán c√≥
    console.log(`üìù GET /api/payment/order-info v·ªõi token: ${token}`);
    console.log(`üîë Danh s√°ch token hi·ªán c√≥: ${Object.keys(paymentSessions).join(', ')}`);
    
    if (!token) {
      console.log('‚ùå Y√™u c·∫ßu thi·∫øu token');
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu token thanh to√°n" 
      });
    }
    
    // Ki·ªÉm tra token c√≥ t·ªìn t·∫°i kh√¥ng
    const paymentInfo = paymentSessions[token];
    
    if (!paymentInfo) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho token: ${token}`);
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n v·ªõi token n√†y"
      });
    }
    
    console.log(`‚úÖ T√¨m th·∫•y th√¥ng tin thanh to√°n cho token: ${token}`);
    console.log(paymentInfo);
    
    // Tr·∫£ v·ªÅ th√¥ng tin ƒë∆°n h√†ng
    return res.status(200).json({
      success: true,
      data: paymentInfo
    });
    
  } catch (error) {
    console.error("L·ªói l·∫•y th√¥ng tin ƒë∆°n h√†ng:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server, kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë∆°n h√†ng"
    });
  }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
export const updatePaymentStatus = (req, res) => {
  try {
    const { token, status } = req.body;
    
    if (!token || !status) {
      return res.status(400).json({ 
        success: false, 
        message: "Thi·∫øu token ho·∫∑c tr·∫°ng th√°i thanh to√°n" 
      });
    }
    
    // Ki·ªÉm tra token c√≥ t·ªìn t·∫°i kh√¥ng
    if (!paymentSessions[token]) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y phi√™n thanh to√°n v·ªõi token n√†y"
      });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    paymentSessions[token].status = status;
    paymentSessions[token].updatedAt = new Date();
    
    return res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng",
      data: paymentSessions[token]
    });
    
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n"
    });
  }
};